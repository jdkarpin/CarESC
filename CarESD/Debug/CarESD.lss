
CarESD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ac  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000344  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000144  00000000  00000000  00000a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000411  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001d3  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003c7  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ea  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000a6  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000004b  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	9e c0       	rjmp	.+316    	; 0x144 <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	85 c0       	rjmp	.+266    	; 0x116 <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec ea       	ldi	r30, 0xAC	; 172
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ac 37       	cpi	r26, 0x7C	; 124
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	06 d1       	rcall	.+524    	; 0x262 <main>
  56:	28 c1       	rjmp	.+592    	; 0x2a8 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <DriveForward>:
volatile uint8_t timerH = 0;
volatile uint8_t inittemp = 0;
volatile uint8_t countDown = 0;

void DriveForward() {
	PortTmp &= ~_BV(TDriverPinLeft);
  5a:	80 91 60 00 	lds	r24, 0x0060
	PortTmp |= _BV(TDriverPinRight);
  5e:	88 7f       	andi	r24, 0xF8	; 248
	PortTmp &= ~_BV(TDriverPinPower);
  60:	82 60       	ori	r24, 0x02	; 2
  62:	80 93 60 00 	sts	0x0060, r24
}
  66:	08 95       	ret

00000068 <DriveBack>:

void DriveBack() {
	PortTmp |= _BV(TDriverPinLeft);
  68:	80 91 60 00 	lds	r24, 0x0060
  6c:	81 60       	ori	r24, 0x01	; 1
	PortTmp &= ~_BV(TDriverPinRight);
	PortTmp &= ~_BV(TDriverPinPower);
  6e:	89 7f       	andi	r24, 0xF9	; 249
  70:	80 93 60 00 	sts	0x0060, r24
}
  74:	08 95       	ret

00000076 <Break>:

void Break() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	87 60       	ori	r24, 0x07	; 7
  7c:	80 93 60 00 	sts	0x0060, r24
}
  80:	08 95       	ret

00000082 <DriverOff>:

void DriverOff() {
	//PortTmp |= _BV(TDriverPinLeft);
	//PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  82:	80 91 60 00 	lds	r24, 0x0060
  86:	84 60       	ori	r24, 0x04	; 4
  88:	80 93 60 00 	sts	0x0060, r24
}
  8c:	08 95       	ret

0000008e <Forward>:


void Forward() {
	DriverOff();
  8e:	f9 df       	rcall	.-14     	; 0x82 <DriverOff>
	DriveForward();
  90:	e4 df       	rcall	.-56     	; 0x5a <DriveForward>
}
  92:	08 95       	ret

00000094 <Backward>:

void Backward() {
	DriverOff();
  94:	f6 df       	rcall	.-20     	; 0x82 <DriverOff>
	DriveBack();
  96:	e8 df       	rcall	.-48     	; 0x68 <DriveBack>
}
  98:	08 95       	ret

0000009a <AllOff>:

void AllOff() {
	//PortTmp |= _BV(DriverPinLeft);
	//PortTmp |= _BV(DriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	08 95       	ret

000000a6 <UpdatePort>:
		SetPin(DriverPortPower, DriverPinPower);
	else
		ClearPin(DriverPortPower, DriverPinPower);
	*/
	
	if ((PortTmpPrevious & DriverPinRight) == (PortTmp & TDriverPinRight) &&
  a6:	20 91 61 00 	lds	r18, 0x0061
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	a9 01       	movw	r20, r18
  ae:	42 70       	andi	r20, 0x02	; 2
  b0:	50 70       	andi	r21, 0x00	; 0
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	90 70       	andi	r25, 0x00	; 0
  bc:	48 17       	cp	r20, r24
  be:	59 07       	cpc	r21, r25
  c0:	11 f4       	brne	.+4      	; 0xc6 <UpdatePort+0x20>
  c2:	22 ff       	sbrs	r18, 2
  c4:	27 c0       	rjmp	.+78     	; 0x114 <__stack+0x35>
		(PortTmpPrevious & DriverPinLeft) == (PortTmp & TDriverPinLeft))
		return;
			
	ClearPin(DriverPortLeft, DriverPinLeft);
  c6:	b4 98       	cbi	0x16, 4	; 22
	ClearPin(DriverPortRight, DriverPinRight);
  c8:	b2 98       	cbi	0x16, 2	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	90 e7       	ldi	r25, 0x70	; 112
  ce:	a2 e0       	ldi	r26, 0x02	; 2
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	a0 40       	sbci	r26, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <UpdatePort+0x2a>
  d8:	00 c0       	rjmp	.+0      	; 0xda <UpdatePort+0x34>
  da:	00 00       	nop
	_delay_ms(100);
	
	if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  dc:	20 91 60 00 	lds	r18, 0x0060
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	c9 01       	movw	r24, r18
  e4:	82 70       	andi	r24, 0x02	; 2
  e6:	90 70       	andi	r25, 0x00	; 0
  e8:	20 fd       	sbrc	r18, 0
  ea:	08 c0       	rjmp	.+16     	; 0xfc <__stack+0x1d>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	19 f4       	brne	.+6      	; 0xf6 <__stack+0x17>
		ClearPin(DriverPortLeft, DriverPinLeft);
  f0:	b4 98       	cbi	0x16, 4	; 22
		ClearPin(DriverPortRight, DriverPinRight);
  f2:	b2 98       	cbi	0x16, 2	; 22
  f4:	0b c0       	rjmp	.+22     	; 0x10c <__stack+0x2d>
	} else if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		//Turn left
		ClearPin(DriverPortLeft, DriverPinLeft); 
  f6:	b4 98       	cbi	0x16, 4	; 22
		SetPin(DriverPortRight, DriverPinRight);
  f8:	b2 9a       	sbi	0x16, 2	; 22
  fa:	08 c0       	rjmp	.+16     	; 0x10c <__stack+0x2d>
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	19 f4       	brne	.+6      	; 0x106 <__stack+0x27>
		//Turn right
		SetPin(DriverPortRight, DriverPinRight);
 100:	b2 9a       	sbi	0x16, 2	; 22
		ClearPin(DriverPortLeft, DriverPinLeft);
 102:	b4 98       	cbi	0x16, 4	; 22
 104:	03 c0       	rjmp	.+6      	; 0x10c <__stack+0x2d>
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		ClearPin(DriverPortLeft, DriverPinLeft);
 106:	b4 98       	cbi	0x16, 4	; 22
		ClearPin(DriverPortRight, DriverPinRight);		
 108:	b2 98       	cbi	0x16, 2	; 22
		ClearPin(DriverPortPower, DriverPinPower);
 10a:	b3 98       	cbi	0x16, 3	; 22
	}
		
	PortTmpPrevious = PortTmp;
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	80 93 61 00 	sts	0x0061, r24
 114:	08 95       	ret

00000116 <__vector_5>:
tPinTimingData pin;

uint16_t rising, falling; 
uint32_t counts;

ISR(TIMER1_OVF_vect) {
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	ov_counter++;
 124:	80 91 6b 00 	lds	r24, 0x006B
 128:	90 91 6c 00 	lds	r25, 0x006C
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 6c 00 	sts	0x006C, r25
 132:	80 93 6b 00 	sts	0x006B, r24
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_3>:

ISR(TIMER1_CAPT_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
 166:	20 91 70 00 	lds	r18, 0x0070
 16a:	30 91 71 00 	lds	r19, 0x0071
 16e:	80 91 6b 00 	lds	r24, 0x006B
 172:	90 91 6c 00 	lds	r25, 0x006C
	uint32_t time;
	if (IsPinSet(PIND, PIND6) > 0) {		
 176:	86 9b       	sbis	0x10, 6	; 16
 178:	29 c0       	rjmp	.+82     	; 0x1cc <__vector_3+0x88>
		time = (((uint32_t)ov_counter)<<16) + pin.riseTime;
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	20 5e       	subi	r18, 0xE0	; 224
 180:	3e 42       	sbci	r19, 0x2E	; 46
 182:	40 40       	sbci	r20, 0x00	; 0
 184:	50 40       	sbci	r21, 0x00	; 0
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	dc 01       	movw	r26, r24
 18c:	99 27       	eor	r25, r25
 18e:	88 27       	eor	r24, r24
		if ((time >= MINOFFWIDTH) && (time <= MAXOFFWIDTH)) {
 190:	28 0f       	add	r18, r24
 192:	39 1f       	adc	r19, r25
 194:	4a 1f       	adc	r20, r26
 196:	5b 1f       	adc	r21, r27
 198:	21 3e       	cpi	r18, 0xE1	; 225
 19a:	6e e2       	ldi	r22, 0x2E	; 46
 19c:	36 07       	cpc	r19, r22
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	46 07       	cpc	r20, r22
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	56 07       	cpc	r21, r22
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <__vector_3+0x6c>
			ov_counter = 0;
 1a8:	10 92 6c 00 	sts	0x006C, r1
 1ac:	10 92 6b 00 	sts	0x006B, r1
		}

		pin.riseTime = ICR1; 
 1b0:	84 b5       	in	r24, 0x24	; 36
 1b2:	95 b5       	in	r25, 0x25	; 37
 1b4:	90 93 71 00 	sts	0x0071, r25
 1b8:	80 93 70 00 	sts	0x0070, r24
		
		TCCR1B &= ~(1<<ICES1); 
 1bc:	8e b5       	in	r24, 0x2e	; 46
 1be:	8f 7b       	andi	r24, 0xBF	; 191
 1c0:	8e bd       	out	0x2e, r24	; 46
		ov_counter=0; 
 1c2:	10 92 6c 00 	sts	0x006C, r1
 1c6:	10 92 6b 00 	sts	0x006B, r1
 1ca:	3a c0       	rjmp	.+116    	; 0x240 <__vector_3+0xfc>
		
	} else { 
		pin.fallTime = ICR1;
 1cc:	e4 b5       	in	r30, 0x24	; 36
 1ce:	f5 b5       	in	r31, 0x25	; 37
 1d0:	f0 93 73 00 	sts	0x0073, r31
 1d4:	e0 93 72 00 	sts	0x0072, r30

		TCCR1B|=1<<ICES1;
 1d8:	4e b5       	in	r20, 0x2e	; 46
 1da:	40 64       	ori	r20, 0x40	; 64
 1dc:	4e bd       	out	0x2e, r20	; 46
		time=(uint32_t)pin.fallTime-(uint32_t)pin.riseTime+(((uint32_t)ov_counter)<<16); 
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	dc 01       	movw	r26, r24
 1e4:	99 27       	eor	r25, r25
 1e6:	88 27       	eor	r24, r24
 1e8:	a9 01       	movw	r20, r18
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	84 1b       	sub	r24, r20
 1f0:	95 0b       	sbc	r25, r21
 1f2:	a6 0b       	sbc	r26, r22
 1f4:	b7 0b       	sbc	r27, r23
 1f6:	9f 01       	movw	r18, r30
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	82 0f       	add	r24, r18
 1fe:	93 1f       	adc	r25, r19
 200:	a4 1f       	adc	r26, r20
 202:	b5 1f       	adc	r27, r21
		if ((time >= MINONWIDTH) && (time <= MAXONWIDTH)) {
 204:	9c 01       	movw	r18, r24
 206:	ad 01       	movw	r20, r26
 208:	26 5b       	subi	r18, 0xB6	; 182
 20a:	33 40       	sbci	r19, 0x03	; 3
 20c:	40 40       	sbci	r20, 0x00	; 0
 20e:	50 40       	sbci	r21, 0x00	; 0
 210:	26 36       	cpi	r18, 0x66	; 102
 212:	64 e0       	ldi	r22, 0x04	; 4
 214:	36 07       	cpc	r19, r22
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	46 07       	cpc	r20, r22
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	56 07       	cpc	r21, r22
 21e:	80 f4       	brcc	.+32     	; 0x240 <__vector_3+0xfc>
			pin.lastGoodWidth = time;
 220:	90 93 75 00 	sts	0x0075, r25
 224:	80 93 74 00 	sts	0x0074, r24
			OCR0A = (time-1000)/4;
 228:	88 5e       	subi	r24, 0xE8	; 232
 22a:	93 40       	sbci	r25, 0x03	; 3
 22c:	a0 40       	sbci	r26, 0x00	; 0
 22e:	b0 40       	sbci	r27, 0x00	; 0
 230:	22 e0       	ldi	r18, 0x02	; 2
 232:	b6 95       	lsr	r27
 234:	a7 95       	ror	r26
 236:	97 95       	ror	r25
 238:	87 95       	ror	r24
 23a:	2a 95       	dec	r18
 23c:	d1 f7       	brne	.-12     	; 0x232 <__vector_3+0xee>
 23e:	86 bf       	out	0x36, r24	; 54
		}
	} 
} 
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <main>:
	}
	*/

int main(void)
{	
	DDRB = 0xFC;
 262:	8c ef       	ldi	r24, 0xFC	; 252
 264:	87 bb       	out	0x17, r24	; 23
	PORTB= 0x0;
 266:	18 ba       	out	0x18, r1	; 24
	
	DDRD = 0x00;
 268:	11 ba       	out	0x11, r1	; 17
	PORTD= 0xFF;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	82 bb       	out	0x12, r24	; 18
	
	OCR0A= 0x0;
 26e:	16 be       	out	0x36, r1	; 54
	TCCR0A=0b11110111;
 270:	87 ef       	ldi	r24, 0xF7	; 247
 272:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000010;	
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	83 bf       	out	0x33, r24	; 51
	
	TCCR1A=0;//0b00001010;
 278:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<ICNC1)|(1<<ICES1)|(1<<CS11);
 27a:	82 ec       	ldi	r24, 0xC2	; 194
 27c:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1<<TOIE1|1<<ICIE1;
 27e:	88 e8       	ldi	r24, 0x88	; 136
 280:	89 bf       	out	0x39, r24	; 57
	//TIMSK=1<<OCIE1B;//|1<<ICIE1;
	
	counts = 0;
 282:	10 92 76 00 	sts	0x0076, r1
 286:	10 92 77 00 	sts	0x0077, r1
 28a:	10 92 78 00 	sts	0x0078, r1
 28e:	10 92 79 00 	sts	0x0079, r1
	
	//GIMSK = 0x30; //wlaczenie przerwan PCINT 
	//PCMSK = 0x01; //wlaczenie przerwania tylko dla PB0 
	
	sei();
 292:	78 94       	sei
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	90 e7       	ldi	r25, 0x70	; 112
 298:	a2 e0       	ldi	r26, 0x02	; 2
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x38>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x42>
 2a4:	00 00       	nop
 2a6:	f6 cf       	rjmp	.-20     	; 0x294 <main+0x32>

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
