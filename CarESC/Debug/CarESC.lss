
CarESC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800064  00800064  00000400  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000103  00000000  00000000  00000b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000463  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001d8  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004f4  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001be  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000042  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000004b  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	c2 c0       	rjmp	.+388    	; 0x18c <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	a1 c0       	rjmp	.+322    	; 0x14e <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e6       	ldi	r30, 0x68	; 104
  36:	f3 e0       	ldi	r31, 0x03	; 3
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ad 36       	cpi	r26, 0x6D	; 109
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	26 d1       	rcall	.+588    	; 0x2a2 <main>
  56:	86 c1       	rjmp	.+780    	; 0x364 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <InitDriver>:
tPinTimingData pin;


void InitDriver() {
	//set as out ports
	DDriverPortLeft |= 1<<DriverPinLeft;
  5a:	bc 9a       	sbi	0x17, 4	; 23
	DDriverPortRight |= 1<<DriverPinRight;
  5c:	bb 9a       	sbi	0x17, 3	; 23
	DDriverPortPower |= 1<<DriverPinPower;
  5e:	ba 9a       	sbi	0x17, 2	; 23
	
	//Set them to 1. (off)
	DriverPortLeft |= 1<<DriverPinLeft;
  60:	c4 9a       	sbi	0x18, 4	; 24
	DriverPortRight |= 1<<DriverPinRight;
  62:	c3 9a       	sbi	0x18, 3	; 24
	DriverPortPower |= 1<<DriverPinPower;	
  64:	c2 9a       	sbi	0x18, 2	; 24
}
  66:	08 95       	ret

00000068 <DriveForward>:

void DriveForward() {
	PortTmp &= ~_BV(TDriverPinLeft);
  68:	80 91 60 00 	lds	r24, 0x0060
	PortTmp |= _BV(TDriverPinRight);
  6c:	88 7f       	andi	r24, 0xF8	; 248
	PortTmp &= ~_BV(TDriverPinPower);
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	80 93 60 00 	sts	0x0060, r24
}
  74:	08 95       	ret

00000076 <DriveBack>:

void DriveBack() {
	PortTmp |= _BV(TDriverPinLeft);
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	81 60       	ori	r24, 0x01	; 1
	PortTmp &= ~_BV(TDriverPinRight);
	PortTmp &= ~_BV(TDriverPinPower);
  7c:	89 7f       	andi	r24, 0xF9	; 249
  7e:	80 93 60 00 	sts	0x0060, r24
}
  82:	08 95       	ret

00000084 <Break>:

void Break() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	80 93 60 00 	sts	0x0060, r24
}
  8e:	08 95       	ret

00000090 <DriverOff>:

void DriverOff() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	87 60       	ori	r24, 0x07	; 7
  96:	80 93 60 00 	sts	0x0060, r24
}
  9a:	08 95       	ret

0000009c <Forward>:


void Forward() {
	DriverOff();
  9c:	f9 df       	rcall	.-14     	; 0x90 <DriverOff>
	DriveForward();
  9e:	e4 df       	rcall	.-56     	; 0x68 <DriveForward>
}
  a0:	08 95       	ret

000000a2 <Backward>:

void Backward() {
	DriverOff();
  a2:	f6 df       	rcall	.-20     	; 0x90 <DriverOff>
	DriveBack();
  a4:	e8 df       	rcall	.-48     	; 0x76 <DriveBack>
}
  a6:	08 95       	ret

000000a8 <AllOff>:

void AllOff() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 93 60 00 	sts	0x0060, r24
}
  b2:	08 95       	ret

000000b4 <UpdatePort>:

void UpdatePort() {
	//DRIVE
	
	uint32_t tmp = (pin.lastGoodWidth - 1000);
  b4:	20 91 6b 00 	lds	r18, 0x006B
  b8:	30 91 6c 00 	lds	r19, 0x006C
	
	if (IsPinSet(PortTmp, TDriverPinPower)) {
  bc:	60 91 60 00 	lds	r22, 0x0060
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	62 ff       	sbrs	r22, 2
  c4:	02 c0       	rjmp	.+4      	; 0xca <UpdatePort+0x16>
		OCR0A = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	20 c0       	rjmp	.+64     	; 0x10a <__stack+0x2b>
}

void UpdatePort() {
	//DRIVE
	
	uint32_t tmp = (pin.lastGoodWidth - 1000);
  ca:	28 5e       	subi	r18, 0xE8	; 232
  cc:	33 40       	sbci	r19, 0x03	; 3
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	cb 01       	movw	r24, r22
  d4:	82 70       	andi	r24, 0x02	; 2
  d6:	90 70       	andi	r25, 0x00	; 0
	
	if (IsPinSet(PortTmp, TDriverPinPower)) {
		OCR0A = 0xFF;
	} else {
		if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
  d8:	60 fd       	sbrc	r22, 0
  da:	0b c0       	rjmp	.+22     	; 0xf2 <__stack+0x13>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	b1 f0       	breq	.+44     	; 0x10c <__stack+0x2d>
			OCR0A = (500-tmp)/2;
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	82 1b       	sub	r24, r18
  ea:	93 0b       	sbc	r25, r19
  ec:	a4 0b       	sbc	r26, r20
  ee:	b5 0b       	sbc	r27, r21
  f0:	08 c0       	rjmp	.+16     	; 0x102 <__stack+0x23>
		} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	59 f4       	brne	.+22     	; 0x10c <__stack+0x2d>
			OCR0A = (tmp-500)/2;
  f6:	da 01       	movw	r26, r20
  f8:	c9 01       	movw	r24, r18
  fa:	84 5f       	subi	r24, 0xF4	; 244
  fc:	91 40       	sbci	r25, 0x01	; 1
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	b0 40       	sbci	r27, 0x00	; 0
 102:	b6 95       	lsr	r27
 104:	a7 95       	ror	r26
 106:	97 95       	ror	r25
 108:	87 95       	ror	r24
 10a:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	90 e7       	ldi	r25, 0x70	; 112
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	81 50       	subi	r24, 0x01	; 1
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	a0 40       	sbci	r26, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <__stack+0x33>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <__stack+0x3d>
 11c:	00 00       	nop
		return;
	*/		

	_delay_ms(100);
	
	if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
 11e:	20 91 60 00 	lds	r18, 0x0060
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	c9 01       	movw	r24, r18
 126:	82 70       	andi	r24, 0x02	; 2
 128:	90 70       	andi	r25, 0x00	; 0
 12a:	20 fd       	sbrc	r18, 0
 12c:	04 c0       	rjmp	.+8      	; 0x136 <__stack+0x57>
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	49 f0       	breq	.+18     	; 0x144 <__stack+0x65>
		//break
		//ClearPin(DriverPortLeft, DriverPinLeft);
		//ClearPin(DriverPortRight, DriverPinRight);
	} else if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		//Forward
		ClearPin(DriverPortLeft, DriverPinLeft); 
 132:	c4 98       	cbi	0x18, 4	; 24
 134:	06 c0       	rjmp	.+12     	; 0x142 <__stack+0x63>
		SetPin(DriverPortRight, DriverPinRight);
		//OCR0A = (tmp-500)/2;
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	19 f4       	brne	.+6      	; 0x140 <__stack+0x61>
		//Backward
		SetPin(DriverPortLeft, DriverPinLeft);
 13a:	c4 9a       	sbi	0x18, 4	; 24
		ClearPin(DriverPortRight, DriverPinRight);
 13c:	c3 98       	cbi	0x18, 3	; 24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__stack+0x65>
		//OCR0A = (500-tmp)/2;
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		SetPin(DriverPortLeft, DriverPinLeft);
 140:	c4 9a       	sbi	0x18, 4	; 24
		SetPin(DriverPortRight, DriverPinRight);		
 142:	c3 9a       	sbi	0x18, 3	; 24
	}
		
	PortTmpPrevious = PortTmp;
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	80 93 61 00 	sts	0x0061, r24
}
 14c:	08 95       	ret

0000014e <__vector_5>:

ISR(TIMER1_OVF_vect) {
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
	if (IsPinSet(PIND, PIND0)) {
 15c:	80 9b       	sbis	0x10, 0	; 16
 15e:	04 c0       	rjmp	.+8      	; 0x168 <__vector_5+0x1a>
		fail = TRUE;		
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 63 00 	sts	0x0063, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_5+0x1e>
	} else {
		fail = FALSE;		
 168:	10 92 63 00 	sts	0x0063, r1
	}		
	ov_counter++;
 16c:	80 91 65 00 	lds	r24, 0x0065
 170:	90 91 66 00 	lds	r25, 0x0066
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 66 00 	sts	0x0066, r25
 17a:	80 93 65 00 	sts	0x0065, r24
}
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <__vector_3>:

ISR(TIMER1_CAPT_vect){
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	if (IsPinSet(PIND, PIND0)) {
 1ae:	80 9b       	sbis	0x10, 0	; 16
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__vector_3+0x2e>
		fail = TRUE;		
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 63 00 	sts	0x0063, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <__vector_3+0x32>
	} else {
		fail = FALSE;		
 1ba:	10 92 63 00 	sts	0x0063, r1
 1be:	20 91 67 00 	lds	r18, 0x0067
 1c2:	30 91 68 00 	lds	r19, 0x0068
 1c6:	80 91 65 00 	lds	r24, 0x0065
 1ca:	90 91 66 00 	lds	r25, 0x0066
	}	
	
	uint32_t time;
	if (IsPinSet(PIND, PIND6) > 0) {		
 1ce:	86 9b       	sbis	0x10, 6	; 16
 1d0:	29 c0       	rjmp	.+82     	; 0x224 <__vector_3+0x98>
		time = (((uint32_t)ov_counter)<<16) + pin.riseTime;
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	20 5e       	subi	r18, 0xE0	; 224
 1d8:	3e 42       	sbci	r19, 0x2E	; 46
 1da:	40 40       	sbci	r20, 0x00	; 0
 1dc:	50 40       	sbci	r21, 0x00	; 0
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	dc 01       	movw	r26, r24
 1e4:	99 27       	eor	r25, r25
 1e6:	88 27       	eor	r24, r24
		if ((time >= MINOFFWIDTH) && (time <= MAXOFFWIDTH)) {
 1e8:	28 0f       	add	r18, r24
 1ea:	39 1f       	adc	r19, r25
 1ec:	4a 1f       	adc	r20, r26
 1ee:	5b 1f       	adc	r21, r27
 1f0:	21 3e       	cpi	r18, 0xE1	; 225
 1f2:	6e e2       	ldi	r22, 0x2E	; 46
 1f4:	36 07       	cpc	r19, r22
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	46 07       	cpc	r20, r22
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	56 07       	cpc	r21, r22
 1fe:	20 f4       	brcc	.+8      	; 0x208 <__vector_3+0x7c>
			ov_counter = 0;
 200:	10 92 66 00 	sts	0x0066, r1
 204:	10 92 65 00 	sts	0x0065, r1
		}

		pin.riseTime = ICR1; 
 208:	84 b5       	in	r24, 0x24	; 36
 20a:	95 b5       	in	r25, 0x25	; 37
 20c:	90 93 68 00 	sts	0x0068, r25
 210:	80 93 67 00 	sts	0x0067, r24
		
		TCCR1B &= ~(1<<ICES1); 
 214:	8e b5       	in	r24, 0x2e	; 46
 216:	8f 7b       	andi	r24, 0xBF	; 191
 218:	8e bd       	out	0x2e, r24	; 46
		ov_counter=0; 
 21a:	10 92 66 00 	sts	0x0066, r1
 21e:	10 92 65 00 	sts	0x0065, r1
 222:	2e c0       	rjmp	.+92     	; 0x280 <__vector_3+0xf4>
		
	} else { 
		pin.fallTime = ICR1;
 224:	e4 b5       	in	r30, 0x24	; 36
 226:	f5 b5       	in	r31, 0x25	; 37
 228:	f0 93 6a 00 	sts	0x006A, r31
 22c:	e0 93 69 00 	sts	0x0069, r30

		TCCR1B|=1<<ICES1;
 230:	4e b5       	in	r20, 0x2e	; 46
 232:	40 64       	ori	r20, 0x40	; 64
 234:	4e bd       	out	0x2e, r20	; 46
		time=(uint32_t)pin.fallTime-(uint32_t)pin.riseTime+(((uint32_t)ov_counter)<<16); 
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	dc 01       	movw	r26, r24
 23c:	99 27       	eor	r25, r25
 23e:	88 27       	eor	r24, r24
 240:	a9 01       	movw	r20, r18
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	84 1b       	sub	r24, r20
 248:	95 0b       	sbc	r25, r21
 24a:	a6 0b       	sbc	r26, r22
 24c:	b7 0b       	sbc	r27, r23
 24e:	9f 01       	movw	r18, r30
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
 258:	a4 1f       	adc	r26, r20
 25a:	b5 1f       	adc	r27, r21
		if ((time >= MINONWIDTH) && (time <= MAXONWIDTH)) {
 25c:	9c 01       	movw	r18, r24
 25e:	ad 01       	movw	r20, r26
 260:	26 5b       	subi	r18, 0xB6	; 182
 262:	33 40       	sbci	r19, 0x03	; 3
 264:	40 40       	sbci	r20, 0x00	; 0
 266:	50 40       	sbci	r21, 0x00	; 0
 268:	26 36       	cpi	r18, 0x66	; 102
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	36 07       	cpc	r19, r22
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	46 07       	cpc	r20, r22
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	56 07       	cpc	r21, r22
 276:	20 f4       	brcc	.+8      	; 0x280 <__vector_3+0xf4>
			pin.lastGoodWidth = time;
 278:	e7 e6       	ldi	r30, 0x67	; 103
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	95 83       	std	Z+5, r25	; 0x05
 27e:	84 83       	std	Z+4, r24	; 0x04
		}
	} 
} 
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <main>:

int main(void)
{	
 2a2:	1f 93       	push	r17
	wdt_enable(WDTO_500MS);
 2a4:	2d e0       	ldi	r18, 0x0D	; 13
 2a6:	88 e1       	ldi	r24, 0x18	; 24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	a8 95       	wdr
 2b0:	81 bd       	out	0x21, r24	; 33
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	21 bd       	out	0x21, r18	; 33
	
	PortTmp = 0xFF;
 2b6:	1f ef       	ldi	r17, 0xFF	; 255
 2b8:	10 93 60 00 	sts	0x0060, r17
	PortTmpPrevious = 0xFF;
 2bc:	10 93 61 00 	sts	0x0061, r17
	
	DDRB = 0xFC;
 2c0:	8c ef       	ldi	r24, 0xFC	; 252
 2c2:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xFF;
 2c4:	18 bb       	out	0x18, r17	; 24
	
	DDRD = 0x00;
 2c6:	11 ba       	out	0x11, r1	; 17
	PORTD= 0xFF;
 2c8:	12 bb       	out	0x12, r17	; 18
	
	InitDriver();
 2ca:	c7 de       	rcall	.-626    	; 0x5a <InitDriver>
	DriverOff();
 2cc:	e1 de       	rcall	.-574    	; 0x90 <DriverOff>
 2ce:	8f e7       	ldi	r24, 0x7F	; 127
 2d0:	9a e1       	ldi	r25, 0x1A	; 26
 2d2:	a6 e0       	ldi	r26, 0x06	; 6
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	a0 40       	sbci	r26, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x32>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x3c>
 2de:	00 00       	nop
	
	_delay_ms(250);
	wdt_reset();
 2e0:	a8 95       	wdr
 2e2:	8f e7       	ldi	r24, 0x7F	; 127
 2e4:	9a e1       	ldi	r25, 0x1A	; 26
 2e6:	a6 e0       	ldi	r26, 0x06	; 6
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	a0 40       	sbci	r26, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x46>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x50>
 2f2:	00 00       	nop
	_delay_ms(250);
	wdt_reset();
 2f4:	a8 95       	wdr
 2f6:	8f e7       	ldi	r24, 0x7F	; 127
 2f8:	9a e1       	ldi	r25, 0x1A	; 26
 2fa:	a6 e0       	ldi	r26, 0x06	; 6
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	90 40       	sbci	r25, 0x00	; 0
 300:	a0 40       	sbci	r26, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x5a>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x64>
 306:	00 00       	nop
	_delay_ms(250);
	wdt_reset();
 308:	a8 95       	wdr
 30a:	8f e7       	ldi	r24, 0x7F	; 127
 30c:	9a e1       	ldi	r25, 0x1A	; 26
 30e:	a6 e0       	ldi	r26, 0x06	; 6
 310:	81 50       	subi	r24, 0x01	; 1
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	a0 40       	sbci	r26, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x6e>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x78>
 31a:	00 00       	nop
	_delay_ms(250);
	wdt_reset();
 31c:	a8 95       	wdr
	
	OCR0A = 0xFF;
 31e:	16 bf       	out	0x36, r17	; 54
	TCCR0A=0b10000111;
 320:	87 e8       	ldi	r24, 0x87	; 135
 322:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000010;	
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	83 bf       	out	0x33, r24	; 51
	
	TCCR1A=0;
 328:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<ICNC1)|(1<<ICES1)|(1<<CS11);
 32a:	82 ec       	ldi	r24, 0xC2	; 194
 32c:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1<<TOIE1|1<<ICIE1;
 32e:	88 e8       	ldi	r24, 0x88	; 136
 330:	89 bf       	out	0x39, r24	; 57
	sei();
 332:	78 94       	sei

	while(1) {
		wdt_reset();
 334:	a8 95       	wdr
		if (fail == FALSE) { //if there is signal
 336:	80 91 63 00 	lds	r24, 0x0063
 33a:	88 23       	and	r24, r24
 33c:	81 f4       	brne	.+32     	; 0x35e <main+0xbc>
			if (pin.lastGoodWidth > 1550) { 
 33e:	80 91 6b 00 	lds	r24, 0x006B
 342:	90 91 6c 00 	lds	r25, 0x006C
 346:	a6 e0       	ldi	r26, 0x06	; 6
 348:	8f 30       	cpi	r24, 0x0F	; 15
 34a:	9a 07       	cpc	r25, r26
 34c:	10 f0       	brcs	.+4      	; 0x352 <main+0xb0>
				Forward();
 34e:	a6 de       	rcall	.-692    	; 0x9c <Forward>
 350:	07 c0       	rjmp	.+14     	; 0x360 <main+0xbe>
			} else if (pin.lastGoodWidth < 1450) {
 352:	b5 e0       	ldi	r27, 0x05	; 5
 354:	8a 3a       	cpi	r24, 0xAA	; 170
 356:	9b 07       	cpc	r25, r27
 358:	10 f4       	brcc	.+4      	; 0x35e <main+0xbc>
				Backward();
 35a:	a3 de       	rcall	.-698    	; 0xa2 <Backward>
 35c:	01 c0       	rjmp	.+2      	; 0x360 <main+0xbe>
			} else {
				DriverOff();	
			}	
		} else {
			DriverOff();	
 35e:	98 de       	rcall	.-720    	; 0x90 <DriverOff>
		}
		UpdatePort(); 
 360:	a9 de       	rcall	.-686    	; 0xb4 <UpdatePort>
	}
 362:	e8 cf       	rjmp	.-48     	; 0x334 <main+0x92>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
