
CarESD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  000001c8  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000dc  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002a3  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000157  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000312  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a0  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000175  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001321  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 36       	cpi	r26, 0x68	; 104
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	5a d0       	rcall	.+180    	; 0x10e <main>
  5a:	69 c0       	rjmp	.+210    	; 0x12e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <DriveForward>:
volatile uint8_t timerH = 0;
volatile uint8_t inittemp = 0;
volatile uint8_t countDown = 0;

void DriveForward() {
	PortTmp &= ~_BV(TDriverPinLeft);
  5e:	80 91 60 00 	lds	r24, 0x0060
	PortTmp |= _BV(TDriverPinRight);
  62:	88 7f       	andi	r24, 0xF8	; 248
	PortTmp &= ~_BV(TDriverPinPower);
  64:	82 60       	ori	r24, 0x02	; 2
  66:	80 93 60 00 	sts	0x0060, r24
}
  6a:	08 95       	ret

0000006c <DriveBack>:

void DriveBack() {
	PortTmp |= _BV(TDriverPinLeft);
  6c:	80 91 60 00 	lds	r24, 0x0060
  70:	81 60       	ori	r24, 0x01	; 1
	PortTmp &= ~_BV(TDriverPinRight);
	PortTmp &= ~_BV(TDriverPinPower);
  72:	89 7f       	andi	r24, 0xF9	; 249
  74:	80 93 60 00 	sts	0x0060, r24
}
  78:	08 95       	ret

0000007a <Break>:

void Break() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  7a:	80 91 60 00 	lds	r24, 0x0060
  7e:	87 60       	ori	r24, 0x07	; 7
  80:	80 93 60 00 	sts	0x0060, r24
}
  84:	08 95       	ret

00000086 <DriverOff>:

void DriverOff() {
	//PortTmp |= _BV(TDriverPinLeft);
	//PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  86:	80 91 60 00 	lds	r24, 0x0060
  8a:	84 60       	ori	r24, 0x04	; 4
  8c:	80 93 60 00 	sts	0x0060, r24
}
  90:	08 95       	ret

00000092 <Forward>:


void Forward() {
	DriverOff();
  92:	f9 df       	rcall	.-14     	; 0x86 <DriverOff>
	DriveForward();
  94:	e4 df       	rcall	.-56     	; 0x5e <DriveForward>
}
  96:	08 95       	ret

00000098 <Backward>:

void Backward() {
	DriverOff();
  98:	f6 df       	rcall	.-20     	; 0x86 <DriverOff>
	DriveBack();
  9a:	e8 df       	rcall	.-48     	; 0x6c <DriveBack>
}
  9c:	08 95       	ret

0000009e <AllOff>:

void AllOff() {
	//PortTmp |= _BV(DriverPinLeft);
	//PortTmp |= _BV(DriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	80 93 60 00 	sts	0x0060, r24
}
  a8:	08 95       	ret

000000aa <UpdatePort>:
		SetPin(DriverPortPower, DriverPinPower);
	else
		ClearPin(DriverPortPower, DriverPinPower);
	*/
	
	if ((PortTmpPrevious&0x7) == (PortTmp &0x7))
  aa:	20 91 60 00 	lds	r18, 0x0060
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	80 91 61 00 	lds	r24, 0x0061
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	82 27       	eor	r24, r18
  b8:	93 27       	eor	r25, r19
  ba:	87 70       	andi	r24, 0x07	; 7
  bc:	90 70       	andi	r25, 0x00	; 0
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	11 f4       	brne	.+4      	; 0xc6 <UpdatePort+0x1c>
		return
	
		
	ClearPin(DriverPortLeft, DriverPinLeft);
  c2:	b4 98       	cbi	0x16, 4	; 22
	else
		ClearPin(DriverPortPower, DriverPinPower);
	*/
	
	if ((PortTmpPrevious&0x7) == (PortTmp &0x7))
		return
  c4:	08 95       	ret
	
		
	ClearPin(DriverPortLeft, DriverPinLeft);
	ClearPin(DriverPortRight, DriverPinRight);
  c6:	b2 98       	cbi	0x16, 2	; 22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	90 e7       	ldi	r25, 0x70	; 112
  cc:	a2 e0       	ldi	r26, 0x02	; 2
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <UpdatePort+0x24>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <UpdatePort+0x2e>
  d8:	00 00       	nop
  da:	c9 01       	movw	r24, r18
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	90 70       	andi	r25, 0x00	; 0
	_delay_ms(100);
	
	if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  e0:	20 fd       	sbrc	r18, 0
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <__stack+0x15>
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	19 f4       	brne	.+6      	; 0xee <__stack+0xf>
		ClearPin(DriverPortLeft, DriverPinLeft);
  e8:	b4 98       	cbi	0x16, 4	; 22
		ClearPin(DriverPortRight, DriverPinRight);
  ea:	b2 98       	cbi	0x16, 2	; 22
  ec:	0b c0       	rjmp	.+22     	; 0x104 <__stack+0x25>
	} else if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		//Turn left
		ClearPin(DriverPortLeft, DriverPinLeft); 
  ee:	b4 98       	cbi	0x16, 4	; 22
		SetPin(DriverPortRight, DriverPinRight);
  f0:	b2 9a       	sbi	0x16, 2	; 22
  f2:	08 c0       	rjmp	.+16     	; 0x104 <__stack+0x25>
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	19 f4       	brne	.+6      	; 0xfe <__stack+0x1f>
		//Turn right
		SetPin(DriverPortRight, DriverPinRight);
  f8:	b2 9a       	sbi	0x16, 2	; 22
		ClearPin(DriverPortLeft, DriverPinLeft);
  fa:	b4 98       	cbi	0x16, 4	; 22
  fc:	03 c0       	rjmp	.+6      	; 0x104 <__stack+0x25>
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		ClearPin(DriverPortLeft, DriverPinLeft);
  fe:	b4 98       	cbi	0x16, 4	; 22
		ClearPin(DriverPortRight, DriverPinRight);		
 100:	b2 98       	cbi	0x16, 2	; 22
		ClearPin(DriverPortPower, DriverPinPower);
 102:	b3 98       	cbi	0x16, 3	; 22
	}
		
	PortTmpPrevious = PortTmp;
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	80 93 61 00 	sts	0x0061, r24
 10c:	08 95       	ret

0000010e <main>:
}

int main(void)
{
	DDRD = 0x3;
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFF;
 116:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;
 118:	88 bb       	out	0x18, r24	; 24
	
	OCR0A=0x1; // przyk³adowe wartoœci 
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	86 bf       	out	0x36, r24	; 54
	OCR0B=0x50; 
 11e:	80 e5       	ldi	r24, 0x50	; 80
 120:	8c bf       	out	0x3c, r24	; 60
	TCCR0A=0b11110111; 
 122:	87 ef       	ldi	r24, 0xF7	; 247
 124:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000010;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	83 bf       	out	0x33, r24	; 51
	
	
	TCCR0B=0b00000010;
 12a:	83 bf       	out	0x33, r24	; 51
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x1e>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
