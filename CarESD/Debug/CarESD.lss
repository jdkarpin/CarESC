
CarESD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800064  00800064  00000338  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000131  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000003d6  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001c1  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000041e  00000000  00000000  00001159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001da  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000042  00000000  00000000  00001822  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000004b  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	98 c0       	rjmp	.+304    	; 0x138 <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	7f c0       	rjmp	.+254    	; 0x10a <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 ea       	ldi	r30, 0xA0	; 160
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a4 36       	cpi	r26, 0x64	; 100
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a4 e6       	ldi	r26, 0x64	; 100
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a3 37       	cpi	r26, 0x73	; 115
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	f4 d0       	rcall	.+488    	; 0x23e <main>
  56:	22 c1       	rjmp	.+580    	; 0x29c <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <InitDriver>:
volatile uint8_t inittemp = 0;
volatile uint8_t countDown = 0;

void InitDriver() {
	//set as out ports
	DDriverPortLeft |= 1<<DriverPinLeft;
  5a:	bc 9a       	sbi	0x17, 4	; 23
	DDriverPortRight |= 1<<DriverPinRight;
  5c:	bb 9a       	sbi	0x17, 3	; 23
	DDriverPortPower |= 1<<DriverPinPower;
  5e:	ba 9a       	sbi	0x17, 2	; 23
	
	//Set them to 1. (off)
	DriverPortLeft |= 1<<DriverPinLeft;
  60:	c4 9a       	sbi	0x18, 4	; 24
	DriverPortRight |= 1<<DriverPinRight;
  62:	c3 9a       	sbi	0x18, 3	; 24
	DriverPortPower |= 1<<DriverPinPower;	
  64:	c2 9a       	sbi	0x18, 2	; 24
}
  66:	08 95       	ret

00000068 <DriveForward>:

void DriveForward() {
	PortTmp &= ~_BV(TDriverPinLeft);
  68:	80 91 60 00 	lds	r24, 0x0060
	PortTmp |= _BV(TDriverPinRight);
  6c:	88 7f       	andi	r24, 0xF8	; 248
	PortTmp &= ~_BV(TDriverPinPower);
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	80 93 60 00 	sts	0x0060, r24
}
  74:	08 95       	ret

00000076 <DriveBack>:

void DriveBack() {
	PortTmp |= _BV(TDriverPinLeft);
  76:	80 91 60 00 	lds	r24, 0x0060
  7a:	81 60       	ori	r24, 0x01	; 1
	PortTmp &= ~_BV(TDriverPinRight);
	PortTmp &= ~_BV(TDriverPinPower);
  7c:	89 7f       	andi	r24, 0xF9	; 249
  7e:	80 93 60 00 	sts	0x0060, r24
}
  82:	08 95       	ret

00000084 <Break>:

void Break() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  84:	80 91 60 00 	lds	r24, 0x0060
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	80 93 60 00 	sts	0x0060, r24
}
  8e:	08 95       	ret

00000090 <DriverOff>:

void DriverOff() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	87 60       	ori	r24, 0x07	; 7
  96:	80 93 60 00 	sts	0x0060, r24
}
  9a:	08 95       	ret

0000009c <Forward>:


void Forward() {
	DriverOff();
  9c:	f9 df       	rcall	.-14     	; 0x90 <DriverOff>
	DriveForward();
  9e:	e4 df       	rcall	.-56     	; 0x68 <DriveForward>
}
  a0:	08 95       	ret

000000a2 <Backward>:

void Backward() {
	DriverOff();
  a2:	f6 df       	rcall	.-20     	; 0x90 <DriverOff>
	DriveBack();
  a4:	e8 df       	rcall	.-48     	; 0x76 <DriveBack>
}
  a6:	08 95       	ret

000000a8 <AllOff>:

void AllOff() {
	PortTmp |= _BV(TDriverPinLeft);
	PortTmp |= _BV(TDriverPinRight);
	PortTmp |= _BV(TDriverPinPower);
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 93 60 00 	sts	0x0060, r24
}
  b2:	08 95       	ret

000000b4 <UpdatePort>:

void UpdatePort() {
	//DRIVE
	if (IsPinSet(PortTmp, TDriverPinPower)) 
  b4:	80 91 60 00 	lds	r24, 0x0060
  b8:	82 ff       	sbrs	r24, 2
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <UpdatePort+0xe>
		OCR0A = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	86 bf       	out	0x36, r24	; 54
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <UpdatePort+0x10>
	else
		OCR0A = 0x0;	
  c2:	16 be       	out	0x36, r1	; 54
	
	/*if ((PortTmpPrevious & TDriverPinRight) == (PortTmp & TDriverPinRight) &&
		(PortTmpPrevious & TDriverPinLeft) == (PortTmp & TDriverPinLeft))
		return;
	*/		
	SetPin(DriverPortLeft, DriverPinLeft);
  c4:	c4 9a       	sbi	0x18, 4	; 24
	SetPin(DriverPortRight, DriverPinRight);
  c6:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	90 e7       	ldi	r25, 0x70	; 112
  cc:	a2 e0       	ldi	r26, 0x02	; 2
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <UpdatePort+0x1a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <UpdatePort+0x24>
  d8:	00 00       	nop
	_delay_ms(100);
	
	if (IsPinClear(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  da:	20 91 60 00 	lds	r18, 0x0060
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	c9 01       	movw	r24, r18
  e2:	82 70       	andi	r24, 0x02	; 2
  e4:	90 70       	andi	r25, 0x00	; 0
  e6:	20 fd       	sbrc	r18, 0
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <__stack+0x13>
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	49 f0       	breq	.+18     	; 0x100 <__stack+0x21>
		//ClearPin(DriverPortLeft, DriverPinLeft);
		//ClearPin(DriverPortRight, DriverPinRight);
	} else if (IsPinClear(PortTmp, TDriverPinLeft) && 
			   IsPinSet(PortTmp, TDriverPinRight)) {
		//Forward
		ClearPin(DriverPortLeft, DriverPinLeft); 
  ee:	c4 98       	cbi	0x18, 4	; 24
  f0:	06 c0       	rjmp	.+12     	; 0xfe <__stack+0x1f>
		SetPin(DriverPortRight, DriverPinRight);
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinClear(PortTmp, TDriverPinRight)) {
  f2:	00 97       	sbiw	r24, 0x00	; 0
  f4:	19 f4       	brne	.+6      	; 0xfc <__stack+0x1d>
		//Turn right
		SetPin(DriverPortLeft, DriverPinLeft);
  f6:	c4 9a       	sbi	0x18, 4	; 24
		ClearPin(DriverPortRight, DriverPinRight);
  f8:	c3 98       	cbi	0x18, 3	; 24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__stack+0x21>
		
	} else if (IsPinSet(PortTmp, TDriverPinLeft) && IsPinSet(PortTmp, TDriverPinRight)) {
		SetPin(DriverPortLeft, DriverPinLeft);
  fc:	c4 9a       	sbi	0x18, 4	; 24
		SetPin(DriverPortRight, DriverPinRight);		
  fe:	c3 9a       	sbi	0x18, 3	; 24
	}
		
	PortTmpPrevious = PortTmp;
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	80 93 61 00 	sts	0x0061, r24
}
 108:	08 95       	ret

0000010a <__vector_5>:
  uint16_t  lastGoodWidth;
} tPinTimingData;

tPinTimingData pin;

ISR(TIMER1_OVF_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
	ov_counter++;
 118:	80 91 6b 00 	lds	r24, 0x006B
 11c:	90 91 6c 00 	lds	r25, 0x006C
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	90 93 6c 00 	sts	0x006C, r25
 126:	80 93 6b 00 	sts	0x006B, r24
}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_3>:

ISR(TIMER1_CAPT_vect){
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	20 91 6d 00 	lds	r18, 0x006D
 15e:	30 91 6e 00 	lds	r19, 0x006E
 162:	80 91 6b 00 	lds	r24, 0x006B
 166:	90 91 6c 00 	lds	r25, 0x006C
	uint32_t time;
	if (IsPinSet(PIND, PIND6) > 0) {		
 16a:	86 9b       	sbis	0x10, 6	; 16
 16c:	29 c0       	rjmp	.+82     	; 0x1c0 <__vector_3+0x88>
		time = (((uint32_t)ov_counter)<<16) + pin.riseTime;
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	20 5e       	subi	r18, 0xE0	; 224
 174:	3e 42       	sbci	r19, 0x2E	; 46
 176:	40 40       	sbci	r20, 0x00	; 0
 178:	50 40       	sbci	r21, 0x00	; 0
 17a:	a0 e0       	ldi	r26, 0x00	; 0
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	dc 01       	movw	r26, r24
 180:	99 27       	eor	r25, r25
 182:	88 27       	eor	r24, r24
		if ((time >= MINOFFWIDTH) && (time <= MAXOFFWIDTH)) {
 184:	28 0f       	add	r18, r24
 186:	39 1f       	adc	r19, r25
 188:	4a 1f       	adc	r20, r26
 18a:	5b 1f       	adc	r21, r27
 18c:	21 3e       	cpi	r18, 0xE1	; 225
 18e:	6e e2       	ldi	r22, 0x2E	; 46
 190:	36 07       	cpc	r19, r22
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	46 07       	cpc	r20, r22
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	56 07       	cpc	r21, r22
 19a:	20 f4       	brcc	.+8      	; 0x1a4 <__vector_3+0x6c>
			ov_counter = 0;
 19c:	10 92 6c 00 	sts	0x006C, r1
 1a0:	10 92 6b 00 	sts	0x006B, r1
		}

		pin.riseTime = ICR1; 
 1a4:	84 b5       	in	r24, 0x24	; 36
 1a6:	95 b5       	in	r25, 0x25	; 37
 1a8:	90 93 6e 00 	sts	0x006E, r25
 1ac:	80 93 6d 00 	sts	0x006D, r24
		
		TCCR1B &= ~(1<<ICES1); 
 1b0:	8e b5       	in	r24, 0x2e	; 46
 1b2:	8f 7b       	andi	r24, 0xBF	; 191
 1b4:	8e bd       	out	0x2e, r24	; 46
		ov_counter=0; 
 1b6:	10 92 6c 00 	sts	0x006C, r1
 1ba:	10 92 6b 00 	sts	0x006B, r1
 1be:	2e c0       	rjmp	.+92     	; 0x21c <__vector_3+0xe4>
		
	} else { 
		pin.fallTime = ICR1;
 1c0:	e4 b5       	in	r30, 0x24	; 36
 1c2:	f5 b5       	in	r31, 0x25	; 37
 1c4:	f0 93 70 00 	sts	0x0070, r31
 1c8:	e0 93 6f 00 	sts	0x006F, r30

		TCCR1B|=1<<ICES1;
 1cc:	4e b5       	in	r20, 0x2e	; 46
 1ce:	40 64       	ori	r20, 0x40	; 64
 1d0:	4e bd       	out	0x2e, r20	; 46
		time=(uint32_t)pin.fallTime-(uint32_t)pin.riseTime+(((uint32_t)ov_counter)<<16); 
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	dc 01       	movw	r26, r24
 1d8:	99 27       	eor	r25, r25
 1da:	88 27       	eor	r24, r24
 1dc:	a9 01       	movw	r20, r18
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	84 1b       	sub	r24, r20
 1e4:	95 0b       	sbc	r25, r21
 1e6:	a6 0b       	sbc	r26, r22
 1e8:	b7 0b       	sbc	r27, r23
 1ea:	9f 01       	movw	r18, r30
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	82 0f       	add	r24, r18
 1f2:	93 1f       	adc	r25, r19
 1f4:	a4 1f       	adc	r26, r20
 1f6:	b5 1f       	adc	r27, r21
		if ((time >= MINONWIDTH) && (time <= MAXONWIDTH)) {
 1f8:	9c 01       	movw	r18, r24
 1fa:	ad 01       	movw	r20, r26
 1fc:	26 5b       	subi	r18, 0xB6	; 182
 1fe:	33 40       	sbci	r19, 0x03	; 3
 200:	40 40       	sbci	r20, 0x00	; 0
 202:	50 40       	sbci	r21, 0x00	; 0
 204:	26 36       	cpi	r18, 0x66	; 102
 206:	64 e0       	ldi	r22, 0x04	; 4
 208:	36 07       	cpc	r19, r22
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	46 07       	cpc	r20, r22
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	56 07       	cpc	r21, r22
 212:	20 f4       	brcc	.+8      	; 0x21c <__vector_3+0xe4>
			pin.lastGoodWidth = time;
 214:	ed e6       	ldi	r30, 0x6D	; 109
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	95 83       	std	Z+5, r25	; 0x05
 21a:	84 83       	std	Z+4, r24	; 0x04
		}
	} 
} 
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:

int main(void)
{	
 23e:	1f 93       	push	r17
	
	
	DDRB = 0xFC;
 240:	8c ef       	ldi	r24, 0xFC	; 252
 242:	87 bb       	out	0x17, r24	; 23
	PORTB= 0x0;
 244:	18 ba       	out	0x18, r1	; 24
	
	DDRD = 0x00;
 246:	11 ba       	out	0x11, r1	; 17
	PORTD= 0xFF;
 248:	1f ef       	ldi	r17, 0xFF	; 255
 24a:	12 bb       	out	0x12, r17	; 18
	
	InitDriver();
 24c:	06 df       	rcall	.-500    	; 0x5a <InitDriver>
	
	OCR0A = 0xFF;
 24e:	16 bf       	out	0x36, r17	; 54
	TCCR0A=0b11110111;
 250:	87 ef       	ldi	r24, 0xF7	; 247
 252:	80 bf       	out	0x30, r24	; 48
	TCCR0B=0b00000010;	
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	83 bf       	out	0x33, r24	; 51
	
	TCCR1A=0;
 258:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<ICNC1)|(1<<ICES1)|(1<<CS11);
 25a:	82 ec       	ldi	r24, 0xC2	; 194
 25c:	8e bd       	out	0x2e, r24	; 46
	TIMSK = 1<<TOIE1|1<<ICIE1;
 25e:	88 e8       	ldi	r24, 0x88	; 136
 260:	89 bf       	out	0x39, r24	; 57
	sei();
 262:	78 94       	sei

	while(1) {
		if (pin.lastGoodWidth > 1600) { 
 264:	80 91 71 00 	lds	r24, 0x0071
 268:	90 91 72 00 	lds	r25, 0x0072
 26c:	26 e0       	ldi	r18, 0x06	; 6
 26e:	81 34       	cpi	r24, 0x41	; 65
 270:	92 07       	cpc	r25, r18
 272:	10 f0       	brcs	.+4      	; 0x278 <main+0x3a>
			Forward();
 274:	13 df       	rcall	.-474    	; 0x9c <Forward>
 276:	07 c0       	rjmp	.+14     	; 0x286 <main+0x48>
		} else if (pin.lastGoodWidth < 1400) {
 278:	a5 e0       	ldi	r26, 0x05	; 5
 27a:	88 37       	cpi	r24, 0x78	; 120
 27c:	9a 07       	cpc	r25, r26
 27e:	10 f4       	brcc	.+4      	; 0x284 <main+0x46>
			Backward();
 280:	10 df       	rcall	.-480    	; 0xa2 <Backward>
 282:	01 c0       	rjmp	.+2      	; 0x286 <main+0x48>
		} else {
			DriverOff();	
 284:	05 df       	rcall	.-502    	; 0x90 <DriverOff>
		}
		
		UpdatePort();
 286:	16 df       	rcall	.-468    	; 0xb4 <UpdatePort>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	90 e7       	ldi	r25, 0x70	; 112
 28c:	a2 e0       	ldi	r26, 0x02	; 2
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x50>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x5a>
 298:	00 00       	nop
 29a:	e4 cf       	rjmp	.-56     	; 0x264 <main+0x26>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
